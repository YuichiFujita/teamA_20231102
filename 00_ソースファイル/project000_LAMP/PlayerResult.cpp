//============================================================
//
//	プレイヤーエントリー処理 [playerEntry.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "PlayerResult.h"
#include "manager.h"
#include "renderer.h"
#include "camera.h"
#include "flail.h"
#include "retentionManager.h"

//************************************************************
//	子クラス [CPlayerEntry] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CPlayerResult::CPlayerResult(const CScene::EMode mode, const int nPad) : CPlayer(mode, nPad)
{

}

//============================================================
//	デストラクタ
//============================================================
CPlayerResult::~CPlayerResult()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CPlayerResult::Init(void)
{
	// プレイヤーの初期化
	if (FAILED(CPlayer::Init()))
	{ // 初期化に失敗した場合

	  // 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// エントリーの設定
	SetEntry();

	// 影の表示をOFFにする
	SetEnableDepthShadow(false);
	SetEnableZTex(false);

	//SetPriority(14);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CPlayerResult::Uninit(void)
{
	// プレイヤーの終了
	CPlayer::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CPlayerResult::Update(void)
{
	// モーション・オブジェクトキャラクターの更新
	UpdateMotion(CPlayer::MOTION_IDOL);
}

//============================================================
//	描画処理
//============================================================
void CPlayerResult::Draw(void)
{
	// 変数を宣言
	D3DVIEWPORT9 defViewport;		// カメラのビューポート保存用
	D3DVIEWPORT9 currentViewport;	// 現在のビューポート保存用

	int nPadID = CManager::GetInstance()->GetRetentionManager()->GetWinRank1st();

									// ポインタを宣言
	LPDIRECT3DDEVICE9 pDevice = CManager::GetInstance()->GetRenderer()->GetDevice();	// デバイスのポインタ
	CCamera *pCamera = CManager::GetInstance()->GetCamera();	// カメラのポインタ

	// カメラのビューポートの位置を設定
	currentViewport = pCamera->GetViewport(CCamera::TYPE_RESULT);	// ビューポート取得
	currentViewport.X = (nPadID);						// 左上位置を設定
	pCamera->SetViewport(CCamera::TYPE_RESULT, currentViewport);		// ビューポート設定

	if (true)
	{ // 現在のプレイヤーがエントリーしている場合

	  // 現在のビューポートを取得
		pDevice->GetViewport(&defViewport);

		// カメラの設定
		CManager::GetInstance()->GetCamera()->SetCamera(CCamera::TYPE_RESULT);

		// オブジェクトキャラクターの描画
		CObjectChara::Draw();

		// カメラの設定を元に戻す
		CManager::GetInstance()->GetCamera()->SetCamera(CCamera::TYPE_MAIN);

		// ビューポートを元に戻す
		pDevice->SetViewport(&defViewport);
	}
}

//============================================================
//	エントリーの設定処理
//============================================================
void CPlayerResult::SetEntry(void)
{
	// 変数を宣言
	D3DXVECTOR3 set = VEC3_ZERO;	// 引数設定用

									// 情報を初期化
	SetState(STATE_NONE);	// 何もしない状態の設定
	SetMotion(MOTION_IDOL);	// 待機モーションを設定

							// 位置を設定
	SetVec3Position(set);

	// 向きを設定
	SetVec3Rotation(set);

	// マテリアルを再設定
	ResetMaterial();

	// メインカラーを設定
	SetMainMaterial();

	// 透明度を不透明に設定
	SetAlpha(1.0f);

	// プレイヤーの付属品の自動描画を停止
	CPlayer::SetEnableDrawUI(false);
	CPlayer::SetEnableDraw(false);
	CObject::SetEnableDraw(true);		// プレイヤーは描画ON
	GetFlail()->SetEnableDraw(true);	// フレイルも描画ON
}