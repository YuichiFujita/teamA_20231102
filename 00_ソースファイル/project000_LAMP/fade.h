//============================================================
//
//	フェードヘッダー [fade.h]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	二重インクルード防止
//************************************************************
#ifndef _FADE_H_
#define _FADE_H_

//************************************************************
//	インクルードファイル
//************************************************************
#include "main.h"
#include "scene.h"

//************************************************************
//	インクルードファイル
//************************************************************
class CObject2D;	// オブジェクト2Dクラス

//************************************************************
//	クラス定義
//************************************************************
// フェードクラス
class CFade
{
public:
	// フェード状態列挙
	enum EFade
	{
		FADE_NONE = 0,	// 何もしていない状態
		FADE_WAIT,		// フェード余韻状態
		FADE_IN,		// フェードイン状態
		FADE_OUT,		// フェードアウト状態
		FADE_MAX		// この列挙型の総数
	};

	// コンストラクタ
	CFade();

	// デストラクタ
	~CFade();

	// メンバ関数
	HRESULT Init(void);	// 初期化
	void Uninit(void);	// 終了
	void Update(void);	// 更新
	void Set(const CScene::EMode mode, const int nWait);	// 次シーンへのフェード設定
	EFade GetState(void) const;	// フェード状態取得

	// 静的メンバ関数
	static CFade *Create(void);				// 生成
	static HRESULT Release(CFade *&pFade);	// 破棄

private:
	// メンバ変数
	CObject2D *m_pObject2D;		// フェード表示の情報
	EFade m_fade;				// フェード状態
	CScene::EMode m_modeNext;	// 次のシーンモード
	int m_nCounterWait;			// 余韻管理カウンター
};

#endif	// _FADE_H_
